"use client";

import React from 'react';
import { useAuth } from '@/auth';

/**
 * Página de ejemplo que muestra cómo usar los permisos y módulos
 */
export default function ExamplePage() {
  const {
    user,
    loading,
    permissions,
    modules,
    accessibleModules,
    permissionsLoaded,
    
    // Funciones de verificación
    hasPermission,
    hasRole,
    hasAnyRole,
    isAdmin,
    isSuperAdmin,
    
    // Funciones CRUD
    canCreate,
    canRead,
    canUpdate,
    canDelete,
    
    // Funciones específicas
    canManageUsers,
    canManageRoles,
    canManagePermissions,
    canAccessDashboard,
    
    // Funciones de módulos
    getModulePermissions,
    getActiveModules,
    
    // Funciones de utilidad
    reloadPermissions,
    getUserName,
    getUserInitials
  } = useAuth();

  if (loading) {
    return (
      <div className="p-6">
        <div className="animate-pulse">
          <div className="h-4 bg-gray-200 rounded w-1/4 mb-4"></div>
          <div className="space-y-2">
            <div className="h-4 bg-gray-200 rounded"></div>
            <div className="h-4 bg-gray-200 rounded w-5/6"></div>
            <div className="h-4 bg-gray-200 rounded w-4/6"></div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="p-6 space-y-6">
      <div className="bg-white rounded-lg shadow p-6">
        <h1 className="text-2xl font-bold text-gray-900 mb-6">
          Ejemplo de Sistema de Permisos
        </h1>
        
        {/* Información del usuario */}
        <div className="bg-blue-50 rounded-lg p-4 mb-6">
          <h2 className="text-lg font-semibold text-blue-900 mb-2">
            Información del Usuario
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
            <div>
              <span className="font-medium">Email:</span> {user?.email}
            </div>
            <div>
              <span className="font-medium">Nombre:</span> {getUserName()}
            </div>
            <div>
              <span className="font-medium">Iniciales:</span> {getUserInitials()}
            </div>
            <div>
              <span className="font-medium">Es Admin:</span> 
              <span className={`ml-2 px-2 py-1 rounded ${isAdmin() ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                {isAdmin() ? 'Sí' : 'No'}
              </span>
            </div>
            <div>
              <span className="font-medium">Es Super Admin:</span> 
              <span className={`ml-2 px-2 py-1 rounded ${isSuperAdmin() ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                {isSuperAdmin() ? 'Sí' : 'No'}
              </span>
            </div>
          </div>
        </div>

        {/* Estado de carga de permisos */}
        <div className="bg-gray-50 rounded-lg p-4 mb-6">
          <div className="flex items-center justify-between">
            <h2 className="text-lg font-semibold text-gray-900">
              Estado de Permisos
            </h2>
            <button
              onClick={() => reloadPermissions(true)}
              className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors"
            >
              Recargar Permisos
            </button>
          </div>
          <div className="mt-2 text-sm text-gray-600">
            <span className={`px-2 py-1 rounded ${permissionsLoaded ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}`}>
              {permissionsLoaded ? 'Permisos Cargados' : 'Permisos No Cargados'}
            </span>
            <span className="ml-4">
              Total permisos: {permissions.length}
            </span>
          </div>
        </div>

        {/* Roles del usuario */}
        {user?.roles && user.roles.length > 0 && (
          <div className="bg-purple-50 rounded-lg p-4 mb-6">
            <h2 className="text-lg font-semibold text-purple-900 mb-2">
              Roles del Usuario
            </h2>
            <div className="flex flex-wrap gap-2">
              {user.roles.map(role => (
                <span
                  key={role.id}
                  className="px-3 py-1 bg-purple-200 text-purple-800 rounded-full text-sm"
                >
                  {role.name}
                </span>
              ))}
            </div>
          </div>
        )}

        {/* Permisos específicos */}
        <div className="bg-green-50 rounded-lg p-4 mb-6">
          <h2 className="text-lg font-semibold text-green-900 mb-2">
            Capacidades del Usuario
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <PermissionCard
              title="Gestionar Usuarios"
              hasPermission={canManageUsers()}
              description="Crear, editar y eliminar usuarios"
            />
            <PermissionCard
              title="Gestionar Roles"
              hasPermission={canManageRoles()}
              description="Crear y modificar roles del sistema"
            />
            <PermissionCard
              title="Gestionar Permisos"
              hasPermission={canManagePermissions()}
              description="Asignar y revocar permisos"
            />
            <PermissionCard
              title="Acceder Dashboard"
              hasPermission={canAccessDashboard()}
              description="Ver el panel de control"
            />
            <PermissionCard
              title="Crear Usuarios"
              hasPermission={canCreate('users')}
              description="Crear nuevos usuarios"
            />
            <PermissionCard
              title="Leer Reportes"
              hasPermission={canRead('reports')}
              description="Ver reportes del sistema"
            />
          </div>
        </div>

        {/* Verificaciones específicas de permisos */}
        <div className="bg-yellow-50 rounded-lg p-4 mb-6">
          <h2 className="text-lg font-semibold text-yellow-900 mb-2">
            Verificaciones Específicas
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
            <div>
              <span className="font-medium">users.create:</span> 
              <span className={hasPermission('users.create') ? 'text-green-600' : 'text-red-600'}>
                {hasPermission('users.create') ? ' ✓ Permitido' : ' ✗ Denegado'}
              </span>
            </div>
            <div>
              <span className="font-medium">users.read:</span> 
              <span className={hasPermission('users.read') ? 'text-green-600' : 'text-red-600'}>
                {hasPermission('users.read') ? ' ✓ Permitido' : ' ✗ Denegado'}
              </span>
            </div>
            <div>
              <span className="font-medium">dashboard.read:</span> 
              <span className={hasPermission('dashboard.read') ? 'text-green-600' : 'text-red-600'}>
                {hasPermission('dashboard.read') ? ' ✓ Permitido' : ' ✗ Denegado'}
              </span>
            </div>
            <div>
              <span className="font-medium">reports.read:</span> 
              <span className={hasPermission('reports.read') ? 'text-green-600' : 'text-red-600'}>
                {hasPermission('reports.read') ? ' ✓ Permitido' : ' ✗ Denegado'}
              </span>
            </div>
          </div>
        </div>

        {/* Módulos accesibles */}
        {accessibleModules.length > 0 && (
          <div className="bg-indigo-50 rounded-lg p-4 mb-6">
            <h2 className="text-lg font-semibold text-indigo-900 mb-2">
              Módulos Accesibles ({accessibleModules.length})
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {getActiveModules().map(module => {
                const modulePermissions = getModulePermissions(module.id);
                return (
                  <div
                    key={module.id}
                    className="bg-white rounded-lg border border-indigo-200 p-4"
                  >
                    <div className="flex items-center mb-2">
                      {module.icon && (
                        <span className="mr-2">{module.icon}</span>
                      )}
                      <h3 className="font-medium text-gray-900">{module.name}</h3>
                    </div>
                    {module.description && (
                      <p className="text-sm text-gray-600 mb-2">{module.description}</p>
                    )}
                    <div className="text-xs text-gray-500">
                      <div>Ruta: {module.path}</div>
                      <div>Permisos: {modulePermissions.length}</div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        )}

        {/* Lista completa de permisos */}
        {permissions.length > 0 && (
          <div className="bg-gray-50 rounded-lg p-4">
            <h2 className="text-lg font-semibold text-gray-900 mb-2">
              Todos los Permisos ({permissions.length})
            </h2>
            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2 max-h-64 overflow-y-auto">
              {permissions.map(permission => (
                <span
                  key={permission}
                  className="px-2 py-1 bg-gray-200 text-gray-700 rounded text-xs"
                >
                  {permission}
                </span>
              ))}
            </div>
          </div>
        )}

        {/* Información adicional del localStorage */}
        <div className="bg-orange-50 rounded-lg p-4">
          <h2 className="text-lg font-semibold text-orange-900 mb-2">
            Información de Caché (localStorage)
          </h2>
          <div className="text-sm text-gray-600 space-y-1">
            <div>Los permisos se cargan una vez al iniciar sesión y se almacenan en localStorage</div>
            <div>Se actualizan automáticamente cada 30 minutos o cuando se recarga manualmente</div>
            <div>Estado actual: {permissionsLoaded ? 'Datos cargados desde caché' : 'Cargando desde servidor'}</div>
          </div>
        </div>
      </div>
    </div>
  );
}

// Componente auxiliar para mostrar tarjetas de permisos
interface PermissionCardProps {
  title: string;
  hasPermission: boolean;
  description: string;
}

const PermissionCard: React.FC<PermissionCardProps> = ({ 
  title, 
  hasPermission, 
  description 
}) => (
  <div className={`p-3 rounded-lg border-2 ${
    hasPermission 
      ? 'border-green-200 bg-green-50' 
      : 'border-red-200 bg-red-50'
  }`}>
    <div className="flex items-center mb-1">
      <span className={`w-3 h-3 rounded-full mr-2 ${
        hasPermission ? 'bg-green-500' : 'bg-red-500'
      }`}></span>
      <h3 className="font-medium text-sm">{title}</h3>
    </div>
    <p className="text-xs text-gray-600">{description}</p>
  </div>
);
